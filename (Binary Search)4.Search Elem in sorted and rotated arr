Approach 1 : LINEAR SEARCH
TC : O(N)
SC : O(1)

Approach 2 :BINARY SEARCH
TC : O(log N)
SC: O(1)

We divide the array into parts. It is done using two pointers, low and high, and dividing the range between them by 2. 
This gives the midpoint of the range. Check if the target is present in the midpoint, calculated before, of the array. 
If not present, check if the left half of the array is sorted. 
This implies that binary search can be applied in the left half of the array provided the target lies between the value range. 
Else check into the right half of the array. 
Repeat the above steps until low <= high. If low > high indicates we have searched the array and the target is not present hence return -1.


class Solution {
    public int search(int[] nums, int target) {
        int low = 0;
        int high = nums.length-1;

        while(low<=high){
            int mid = low + (high-low)/2;

            if(nums[mid]==target)return mid;

            if(nums[mid]>nums[low]){
                if(nums[low]<=target && target<nums[mid])
                    high = mid - 1;
                else
                    low = mid + 1;
            }else{
                if(nums[mid]<target && target<=nums[high])
                    low = mid + 1;
                else
                    high = mid - 1;                   
                }
            }
            return -1;
        }
    }
