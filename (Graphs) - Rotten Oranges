class Solution {
    public int orangesRotting(int[][] grid) {
        if(grid.length==0 || grid == null)return 0;
        int rows = grid.length;
        int cols = grid[0].length;
        int oranges = 0;
        Queue<int[]> queue = new LinkedList<>();
        for(int i = 0;i<rows;i++){
            for(int j = 0;j<cols;j++){
                if(grid[i][j] == 2){
                    queue.add(new int[]{i,j});
                }
                if(grid[i][j]!=0){
                    oranges++;
                }
            }
        }
        if(oranges == 0) return 0;
        int min_count = 0;
        int count = 0;
        int dx[] = {0,0,1,-1};
        int dy[] = {1,-1,0,0};
        while(!queue.isEmpty()){
            int size = queue.size();
            count = count + size;
            for(int i = 0 ; i < size ; i++){
                int[] point = queue.remove();
                for(int j = 0;j<4;j++){
                    int x = point[0] + dx[j];
                    int y = point[1] + dy[j];

                    if(x<0 || y<0 || x>=rows || y>=cols || grid[x][y]==0 || grid[x][y] == 2){
                        continue;
                    }
                    else{
                        grid[x][y] = 2;
                        queue.add(new int[]{x,y});
                    }
                    
                }
            }
            if(queue.size() != 0) {
                min_count++;
            }
            
            
        }
        return count == oranges ?min_count:-1;
    }
}
