
class Solution
{
    static boolean isSafe(int grid[][],int row,int col,int number){
        //checking row and column
        for(int i=0;i<grid.length;i++){
            if(grid[row][i]==number)
                return false;
            if(grid[i][col]==number){
                return false;
            }
        }
        //To check within the grid
        
        int gridStartRow = (row/3)*3;
        int gridStartCol = (col/3)*3;
        for(int i = gridStartRow;i<gridStartRow+3;i++){
            for(int j=gridStartCol;j<gridStartCol+3;j++){
                if(grid[i][j]==number){
                    return false;
                }
            }
        }
        return true;
    }
    //Function to find a solved Sudoku. 
    static boolean SolveSudoku(int grid[][])
    {
        // add your code here
        for(int i = 0;i<grid.length;i++){
            for(int j =0 ;j<grid.length;j++){
                if(grid[i][j] == 0){
                    for(int num = 1;num<=9;num++){
                        if(isSafe(grid,i,j,num)){
                            grid[i][j]=num;
                            if(SolveSudoku(grid)==true){
                                return true;
                            }
                            else{
                                grid[i][j]=0;
                            }
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
    
    //Function to print grids of the Sudoku.
    static void printGrid (int grid[][])
    {
        // add your code here
        for(int i = 0;i<grid.length;i++){
            for(int j=0;j<grid.length;j++){
                System.out.print(grid[i][j]+" ");
            }
        }
    }
}

TC: O(9^(n*n))
SC: O(1)
