class Pair{
    String first;
    int second;
    Pair(String first,int second){
        this.first = first;
        this.second = second;
    }
}
class Solution {
    
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        //first i need to place all my strings from wordList into a set
        Set<String> st = new HashSet<String>();
        int len = wordList.size();
        for(int i = 0;i<len;i++){
            st.add(wordList.get(i));
        }
        //I need a queue to keep the words and the level of transformation
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(beginWord,1));
        //from the set remove if this start word is present in it
        st.remove(beginWord);
        while(!q.isEmpty()){
            //we do the bfs taking the beginWord
            String word = q.peek().first;
            int steps = q.peek().second;
            q.remove();
            if(word.equals(endWord))return steps;

            //for each letter in word we have to replace with 'a'-'z'
            for(int i = 0;i<word.length();i++){
                for(char ch = 'a';ch<='z';ch++){
                    //since we need to replace the character,string needs to be converted as charArray
                    char replacedArray[] = word.toCharArray();
                    replacedArray[i] = ch;
                    String replacedWord = new String(replacedArray);
                    //only if this replacedWord exists in set, I can add it into q
                    if(st.contains(replacedWord)){
                        //remove from set so that we dont encounter it again
                        st.remove(replacedWord);
                        q.add(new Pair(replacedWord,steps+1));
                    }
                }
            }
        }
        return 0;
    }
}
