Approach-1: 

 static boolean validate(char[][] board, int row, int col) {
        int duprow = row;
        int dupcol = col;
        while (row >= 0 && col >= 0) {
            if (board[row][col] == 'Q') return false;
            row--;
            col--;
        }

        row = duprow;
        col = dupcol;
        while (col >= 0) {
            if (board[row][col] == 'Q') return false;
            col--;
        }

        row = duprow;
        col = dupcol;
        while (col >= 0 && row < board.length) {
            if (board[row][col] == 'Q') return false;
            col--;
            row++;
        }
        return true;
    }

    static void dfs(int col, char[][] board, List < List < String >> res) {
        if (col == board.length) {
            res.add(construct(board));
            return;
        }

        for (int row = 0; row < board.length; row++) {
            if (validate(board, row, col)) {
                board[row][col] = 'Q';
                dfs(col + 1, board, res);
                board[row][col] = '.';
            }
        }
    }
    
Time Complexity: Exponential in nature since we are trying out all ways, to be precise its O(N! * N).

Space Complexity: O( N^2 ) 
    
    
    
Approach 2: Space is optimized to O(N)



class Solution {
    public List<List<String>> solveNQueens(int n) {
        //Create A board of n x n with entire board with . by default
        char[][] board = new char[n][n];
        for(int i = 0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j] = '.';
            }
        }
        List<List<String>> res = new ArrayList<List<String>>();
        int[] leftRow = new int[n];          
        int[] lowerDiagonal = new int[2*n-1];
        int[] upperDiagonal = new int[2*n-1];

        solve(0,board,res,leftRow,upperDiagonal,lowerDiagonal);
        return res;
    }
    static void solve(int col,char[][] board,List<List<String>> res,int[] leftRow,int[] upperDiagonal,int[] lowerDiagonal){
        //base condition
        if(col == board.length){
            res.add(construct(board));
            return;
        }

        for(int row = 0;row<board.length; row++){
            if(leftRow[row]==0 && upperDiagonal[board.length-1+col-row]==0 && lowerDiagonal[row+col]==0){
                board[row][col]='Q'; // Add queen
                leftRow[row]=1;
                upperDiagonal[board.length - 1 + col - row]=1;
                lowerDiagonal[row+col]=1;

                solve(col+1,board,res,leftRow,upperDiagonal,lowerDiagonal);
                
                board[row][col]='.'; //BackTrack
                leftRow[row]=0;
                upperDiagonal[board.length - 1 + col - row]=0;
                lowerDiagonal[row+col]=0;
        
            }
        }
    }
    //Construct
    static List<String> construct(char[][] board){
        List<String> res = new LinkedList<String>();

        for(int i = 0;i<board.length;i++)
        {
            String rs = new String(board[i]);
            res.add(rs);
        }
        return res;
    }
}
