//Brute Force Approach would be to Take a new Array of size m+n
//Insert all the elements of both the given sorted array [1,4,5] [2,3,7] -->[1,4,5,2,3,7]----------Arrays.sort------->[1,2,3,4,5,7]
//TC : O(n log n) + O(N)
//SC : O(n)


//Best Approach
 
//Have two pointers i and j pointing to end of arr1 and arr2 (sorted arrays)
//if(arr1[i]>arr2[j]){
//arr1[k]=arr1[i] where k=m+n-1
//i--,k--

//if(arr1[i]<arr2[j]){
//arr1[k]=arr2[j]
//j--,k--

//TC:O(m+n)
//SC:O(m+n)

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        // Initialize i and j to store indices of the last element of 1st and 2nd array respectively...
        int i = m - 1 , j = n - 1;
        // Initialize a variable k to store the last index of the 1st array...
        int k = m + n - 1;
        // Create a loop until either of i or j becomes zero...
        while(i >= 0 && j >= 0) {
            if(nums1[i] >= nums2[j]) {
                nums1[k] = nums1[i];
                i--;
            } else {
                nums1[k] = nums2[j];
                j--;
            }
            k--;
        // Either of i or j is not zero, which means some elements are yet to be merged.
        // Being already in a sorted manner, append them to the 1st array in the front.
        }
        // While i does not become zero...
        while(i >= 0)
            nums1[k--] = nums1[i--];
        // While j does not become zero...
        while(j >= 0)
            nums1[k--] = nums2[j--];
        // Now 1st array has all the elements in the required sorted order...
        return; 
    // Arrays.asList(nums1);
    // int last = m+n-1;
    // for(int i = m;i<=last;i++){
    //     nums1[i] = 0;
    // }
    // //System.out.print(nums1);
    // int j = 0;
    // for(int i = m;i<=last;i++){
        
    //     if(nums1[i]==0){
    //         nums1[i]=nums2[j++];
    //     }
    // }
    // Arrays.sort(nums1);
    }
    

}
