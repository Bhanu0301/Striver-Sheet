Given an array Arr[] of integers, rearrange the numbers of the given array into the lexicographically next greater permutation of numbers.

For example : 
Arr[] = {1,2,3}
O/P:
{1,3,2}


//Brute Force
/* The approach would be to find all permuatations and then sort them
   Find the next permuation of given Arr[] in that set of all possible permutations */
   
//TC : O(n!*n)
//SC : O(n!)

//Optimized Approach

//Algo or Intitution to keep in mind

/* We have to find where the increasing seq starts(peak)  13542 <-here 3 is where the number increased but how do we find
   Start traversing from the back(last elem of array)
   if arr[i]<arr[i+1] then this is where the peak actually start    13 5 4 2       (3<5)
   now from index i start traversing right and find the next smallest greater number. (4)
   or else in just above step start from backa and find the number greater than the elem at i (4)
   Now Swap them      1 4 5 3 2
   Reverse all elems after index i     14 2 3 5 -> Next permutation */
   
class Solution {
    public void nextPermutation(int[] arr) {
        int i=0;
        int N=arr.length;
        //Finding the peak
        for( i = N-2 ; i>=0 ;i--){
            if(arr[i]<arr[i+1]){
                break;
            }
        }
        if(i>=0){
            int j = arr.length - 1;
            //Finding the smallest greater elem than the elem found at index i
            while(arr[j]<=arr[i]) j--;
            //Once found swap both the elems
            swap(arr,i,j);
        }
        //Now reverse all the elems to right of index i
        reverse(arr,i+1,arr.length-1);
    }
    //Function to swap
    public void swap(int[] arr , int i , int j){
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
    //reverse function
    public void reverse(int[] arr,int i ,int j){
        while(i<j) swap(arr,i++,j--);
    }
}

//TC : O(n)+O(n)+O(n) [peakfind + Find_nextsmall_to_elem@i + Reverse]
//SC : O(1)
