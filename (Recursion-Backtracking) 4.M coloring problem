class solve {
    // Function to determine if graph can be coloured with at most M colours
    // such
    // that no two adjacent vertices of graph are coloured with same colour.
    public boolean isSafe(int node,boolean graph[][],int[] color,int m,int n,int col){
        for( int i = 0;i<n;i++){
            //if it is connected to another node and both colors are same
            if(graph[node][i]&& color[i]==col)return false;
        }
        return true;
    }
    public boolean solve(int node,boolean graph[][],int[] color,int m,int n){
        if(node == n){   //if all node are coloured
            return true;
        }
        //color this node with all possible color
        for(int i=1;i<=m;i++){
            if(isSafe(node,graph,color,m,n,i)){
                color[node] = i;
                //color the next node
                if(solve(node+1,graph,color,m,n)==true)return true;
                //if it can't be colored then we remove color
                color[node] = 0;
            }
        }
        //if any one node are not coloured by 1 to m colors
        return false;
    }
    public boolean graphColoring(boolean graph[][], int m, int n) {
        // Your code here
        int []color = new int[n];
        return solve(0,graph,color,m,n);
        
    }
}


TC : O(n^m)
SC : O(n)
