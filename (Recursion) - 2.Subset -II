// Print all Unique subsets from given array nums[]

//for [1,2,2] -> [[],[1],[2],[1,2],[1,2,2]]] are unique subsets

/* Brute Force 



                    Pick non- pick method
                    Generate all subsets
                    Then add or put into an SET so that all duplicates are removed
                    But Here we use extra space for HashSet and to covert back it takes more timeeeee....!
                    
                    Time Complexity: O( 2^n *(k log (x) )). 2^n  for generating every subset and k* log( x)  
                    to insert every combination of average length k in a set of size x. After this, we have to convert the set of 
                    combinations back into a list of list /vector of vectors which takes more time.

                    Space Complexity:  O(2^n * k) to store every subset of average length k. Since we are initially using a set to store 
                    the answer another O(2^n *k) is also used.

    public static void fun(int[] nums, int index, List < Integer > ds, HashSet < String > res) {
        if (index == nums.length) {
            Collections.sort(ds);
            res.add(ds.toString());
            return;
        }
        ds.add(nums[index]);
        fun(nums, index + 1, ds, res);
        ds.remove(ds.size() - 1);
        fun(nums, index + 1, ds, res);
    }
    public static List < String > subsetsWithDup(int[] nums) {
        List < String > ans = new ArrayList < > ();
        HashSet < String > res = new HashSet < > ();
        List < Integer > ds = new ArrayList < > ();
        fun(nums, 0, ds, res);
        for (String it: res) {
            ans.add(it);
        }
        return ans;
    }
*/


//Better Optimal Approach

//here we exclude extra space for set by making unique selections of subset at same time of recursion calls

class Solution {


    static void Helper(int ind,int nums[],List<Integer> ds,List<List<Integer>> ans){
        //each time a Helper function is called add the ds into ans list
        ans.add(new ArrayList<>(ds));
        for(int i = ind;i<nums.length;i++){
            if(i!=ind && nums[i]==nums[i-1]) continue;//To avoid duplicate
            ds.add(nums[i]);
            Helper(i+1,nums,ds,ans);
            ds.remove(ds.size()-1);
        }
    }
    public List<List<Integer>> subsetsWithDup(int[] nums) {
           Arrays.sort(nums); //Sort to get duplicates side by side if any
           List<List<Integer>> ans= new ArrayList<List<Integer>>();
           Helper(0,nums,new ArrayList<>(),ans);
           return ans;

    }
}
