class Solution
{
    private List<Integer> topoSort(int V, ArrayList<ArrayList<Integer>> adj){
        //Steps of toposort
        //Find the indegree of all nodes
        int[] indegree = new int[V];
        for(int i = 0;i<V;i++){
            for(int it:adj.get(i)){
                indegree[it]++;
            }
        }
        //If the indegree is 0 then add it into the queue
        Queue<Integer> q = new LinkedList<>();
        for(int i = 0;i<V;i++){
            if(indegree[i]==0){
                q.add(i);
            }
        }
        //add it into topo(ans List)
        List<Integer> topo = new ArrayList<>();
        while(!q.isEmpty()){
            int node = q.peek();
            topo.add(node);
            q.remove();
            for(int it : adj.get(node)){
                indegree[it]--;
                if(indegree[it]==0){
                    q.add(it);
                }
            }
        }
        return topo;
    }
    public String findOrder(String [] dict, int N, int K)
    {
        // Write your code here
        //Create adjacancy list
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i = 0;i<K;i++){
            adj.add(new ArrayList<>());
        }
        for(int i = 0;i<N-1;i++){
            String word1 = dict[i];
            String word2 = dict[i+1];
            int len = Math.min(word1.length(),word2.length());
            for(int ptr = 0;ptr<len;ptr++){
                if(word1.charAt(ptr)!=word2.charAt(ptr)){
                    adj.get(word1.charAt(ptr)-'a').add(word2.charAt(ptr)-'a');
                    break;
                }
            }
        }
        List<Integer> topo = topoSort(K,adj);
        String ans = "";
        for(int it : topo){
            ans = ans + (char)(it+(int)('a'));
        }
        return ans;
    }
}
