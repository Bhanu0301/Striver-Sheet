Approach 1 : Using XOR(^)
TC : O(N)
SC : O(1)

Approach 2 : Binary search

TC : O(logN)
SC : O(1)

class Solution {
    public int singleNonDuplicate(int[] nums) {
        int low = 0;
        int high = nums.length-2; //From last 2nd (because we need to compare na mid and mid+1)

        while(low<=high){
            int mid = low + (high-low)/2;
            //if mid element is at odd index
            if(mid%2==1){
                //and if the mid and mid+1 is not equal then it is in LEFT ARRAY -->shrink left array
                if(nums[mid]!=nums[mid+1])
                    low = mid + 1;
                else // else it will be in RIGHT ARRAY--> shrink right array
                    high = mid-1;
            }else{
                //if mid element is at even index
                //And if the mid and mid+1 both are equal then it is in LEFT ARRAY
                if(nums[mid]==nums[mid+1])
                    low = mid+1;
                else//And if the mid and mid+1 are not equal then it is in RIGHT ARRAY
                    high = mid-1;
            }
        }
        return nums[low];
    }
}
