//[-2,-3,4,-1,-2,1,5,-3]

/* Naive approach will be to either use 3 or 2 for loops and have the sum and max variables
   for each subarray find sum and compare,update max variable
   finally return max
   
   TC : O(n^3) or O(n^2)
   SC : O(1)

*/

//Best Approach

//KADANE'S ALGORITHM
/* Firstly we keep max = nums[0]
   Keep finding sum as u traverse
   if sum > max make max = sum
   if sum < 0 then make sum as 0
   
   TC : O(n)
   SC : O(1)
*/

class Solution {
    public int maxSubArray(int[] nums) {
        int max = nums[0];
        int sum = 0;
        
        for(int i=0;i<nums.length;i++){
            sum += nums[i];
            if(sum>max) max= sum;
            if(sum<0) sum = 0;
        }
        return max;
    }
}
