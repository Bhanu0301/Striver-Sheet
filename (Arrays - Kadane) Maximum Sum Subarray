//[-2,-3,4,-1,-2,1,5,-3]

/* Naive approach will be to either use 3 or 2 for loops and have the sum and max variables
   for each subarray find sum and compare,update max variable
   finally return max
   
   TC : O(n^3) or O(n^2)
   SC : O(1)

*/

//Best Approach

//KADANE'S ALGORITHM
/* Firstly we keep max = nums[0]
   Keep finding sum as u traverse
   if sum > max make max = sum
   if sum < 0 then make sum as 0
   
   TC : O(n)
   SC : O(1)
*/

class Solution {
    public int maxSubArray(int[] nums) {
        int max = nums[0];
        int sum = 0;
        
        for(int i=0;i<nums.length;i++){
            sum += nums[i];
            if(sum>max) max= sum;
            if(sum<0) sum = 0;
        }
        return max;
    }
}

//GFG --> Return the Subarray itself instead of sum


class Solution {

    ArrayList<Integer> findSubarray(int a[], int n) {
        // code here
        int sum = 0;
        int max = a[0];
        int start = 0;
        int end = 0;
        int as = 0;
        int ae = 0;
        ArrayList<Integer> ans = new ArrayList<Integer>();
        for(int i = 0;i<a.length;i++){
            if(a[i]>=0){
                sum = sum + a[i];
                end = i;
            }
            if(a[i]<0){  // FOR INPUT : 1 1 -1 2
                sum = 0;
                start = i+1; // 3
                end = i+1;  // 3
            }
            if(sum>max){ // FOR INPUT : 1 1 -1 2
                max = sum;
                as = start;// 0
                ae = end;// 1
            }
            // case : 1 1 -1 2 --> here with maxsum = 2 we need to select those with more nos
            else if(sum==max && end-start>ae-as){
                max = sum;
                as=start;
                ae=end;
            }
        }
        for(int i = as;i<=ae;i++){
            ans.add(a[i]);
        }
        return ans;
        
    }
}
