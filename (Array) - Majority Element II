class Solution {
    public List<Integer> majorityElement(int[] nums) {
        int num1 = -1, num2 = -1 , count1 = 0 ,count2 = 0;
        int len = nums.length;
        //MOORE'S ALGORITHM
        //find out those 2 elements who are probable ones of majority elements that appear >=[n/3] times
        //num1 , num2
        for(int i = 0;i<len ;i++){
            if(nums[i] == num1){
                count1++;
            }
            else if(nums[i] == num2){
                count2++;
            }
            else if(count1==0){
                num1 = nums[i];
                count1 = 1;
            }
            else if(count2 == 0){
                num2 = nums[i];
                count2 = 1;
            }
            else{
                count1--;
                count2--;
            }
        }
        //FIND THE NUMBER OF TIMES THEY APPEAR IN THE ARRAY nums[]
        // count1 , count2
        
        List<Integer> majorityElements = new ArrayList<Integer>();
        count1 = 0;
        count2 = 0;
        for(int i = 0;i<len;i++){
            if(nums[i]==num1){
                count1++;
            }
            else if(nums[i] == num2){
                count2++;
            }
        }
        if(count1>len/3){
            majorityElements.add(num1);
        }
        if(count2>len/3){
            majorityElements.add(num2);
        }
        return majorityElements;
    }

}
