class Solution {
    public void sortColors(int[] nums) {

        //DUTCH FLAG ALGORITHM   TC:O(n) & SC:O(1)
        /* All elements before low is 0, all elements after high is 2 and all elems 
        b/w low to mid-1 is 1*/ 
        
        /* if current elem is
        0 : swap a[low] and a[mid] , low++,mid++
        1 : mid++
        2 : swap a[high] and a[mid] , high-- */

        //i will be using 3 pointers low(at 0),high(at last elem) and mid(at 0)
        int low  = 0;
        int mid = 0;
        int high = nums.length-1;
        int temp = 0;
        while(mid<=high){
            switch(nums[mid]){
                case 0 : {
                    //Swapping elem at low with mid anmata
                    temp = nums[low];
                    nums[low] = nums[mid];
                    nums[mid] = temp;
                    //And then incrementing low and mid indecies
                    low++;
                    mid++;
                    break;
                }
                case 1 : 
                //if it's 1 then only increment mid
                    mid++;
                    break;
                case 2: {
                    //if 2 then swap elem at mid with elem at high
                    temp = nums[mid];
                    nums[mid] = nums[high];
                    nums[high]= temp;
                    //and then decrement high only keeping mid at same pos
                    high--;
                    break;
                }
            }  
        }
    }
}
