//Course Schedule I - just say true or false on possiblity to schedule course

class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        //we need to represent in the form of a graph as we wish to use topological sorting
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        int n = prerequisites.length;
        for(int i = 0;i<numCourses;i++){
            adj.add(new ArrayList<>());
        }
        for(int i = 0;i<n;i++){
            adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        int[] indegree = new int[numCourses];
        for(int i = 0;i<numCourses;i++){
            for(int it:adj.get(i)){
                indegree[it]++;
            }
        }
        //our next step is to insert all those nodes with indegree 0 into the queue
        Queue<Integer> q = new LinkedList<Integer>();
        for(int i = 0;i<numCourses;i++){
            if(indegree[i]==0){
                q.add(i);
            }
        }
        ArrayList<Integer> topo = new ArrayList<>();
        while(!q.isEmpty()){
            int node = q.peek();
            q.remove();
            topo.add(node);
            for(int it:adj.get(node)){
                indegree[it]--;
                if(indegree[it]==0){
                    q.add(it);
                }
            }
        }
        if(topo.size()==numCourses){
            return true;
        }
        return false;
    }
}



//Course Schedule II

class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        int n = prerequisites.length;
        for(int i = 0;i<numCourses;i++){
            adj.add(new ArrayList<>());
        }
        for(int i = 0;i<n;i++){
            adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        int[] indegree = new int[numCourses];
        for(int i = 0;i<numCourses;i++){
            for(int it:adj.get(i)){
                indegree[it]++;
            }
        }
        //our next step is to insert all those nodes with indegree 0 into the queue
        Queue<Integer> q = new LinkedList<Integer>();
        for(int i = 0;i<numCourses;i++){
            if(indegree[i]==0){
                q.add(i);
            }
        }
        int[] topo = new int[numCourses];
        int i = 0;
        while(!q.isEmpty()){
            int node = q.peek();
            q.remove();
            topo[i++]=node;
            for(int it:adj.get(node)){
                indegree[it]--;
                if(indegree[it]==0){
                    q.add(it);
                }
            }
        }
        if(i==numCourses)return topo;
        int[] arr={};
        return arr;
    }
}
