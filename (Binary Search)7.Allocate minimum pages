class Solution 
{
    
    static boolean isPossible(int []A,int N,int mid,int M){
        int count = 0;
        int sumAllocated = 0;
        for(int i = 0;i<A.length;i++){
            if(sumAllocated + A[i] > mid){
                count ++;
                sumAllocated = A[i];
                if(sumAllocated>mid)return false;
            }
            else 
                sumAllocated = sumAllocated + A[i];
        }
        if(count<M)return true;
        return false;
    }
    //Function to find minimum number of pages.
    public static int findPages(int[]A,int N,int M)
    {
        //Your code here
        if(N<M)return -1;
        int low = A[0];
        int high = 0;
        for(int i = 0;i<N;i++){
            high = high + A[i];
            low = Math.min(low,A[i]);
        }
        int res = -1;
        while(low<=high){
            int mid = (low + high)/2;
            if(isPossible(A,N,mid,M)){
                res = mid;
                high = mid-1;
            }
            else{
                low = mid + 1;
            }
        }
        return low;
    }
};

Time Complexity : O(NlogN)

Reason: Binary search takes O(log N). For every search, we are checking if an allocation is possible or not. Checking for allocation takes O(N).

Space Complexity: O(1)

Reason: No extra data structure is used to store spaces.
