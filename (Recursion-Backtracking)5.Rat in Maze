// m is the given matrix and n is the order of matrix
class Solution {
    public static void solve(int i,int j,int[][] m,int n,ArrayList<String> ans,String move,int[][] visit){
        if(i==n-1  && j==n-1){
            ans.add(move);
            return;
        }
        
        //Downward = i+1
        if(i+1<n && visit[i+1][j]==0 && m[i+1][j]==1){
            visit[i][j] = 1;
            solve(i+1,j,m,n,ans,move+'D',visit);
            visit[i][j] = 0;
        }
        //Left = j-1
        if(j-1>=0 && visit[i][j-1]==0 && m[i][j-1]==1){
            visit[i][j] = 1;
            solve(i,j-1,m,n,ans,move+'L',visit);
            visit[i][j] = 0;
        }
        //Right = j+1
        if(j+1<n && visit[i][j+1]==0 && m[i][j+1]==1){
            visit[i][j] = 1;
            solve(i,j+1,m,n,ans,move+'R',visit);
            visit[i][j] = 0;
        }
        //Upward = i-1
        if(i-1>=0 && visit[i-1][j]==0 && m[i-1][j]==1){
            visit[i][j] = 1;
            solve(i-1,j,m,n,ans,move+'U',visit);
            visit[i][j] = 0;
        }
    }
    public static ArrayList<String> findPath(int[][] m, int n) {
        // Your code here
        //create a visited array so that we keep track the path so that we dont visit same path
        int[][] visit = new int[n][n];
        for(int i = 0;i<n;i++){
            for(int j = 0;j<n;j++){
                 visit[i][j] = 0;
            }
        }
        ArrayList<String> ans = new ArrayList<String>();
        if(m[0][0]==1){
            solve(0,0,m,n,ans,"",visit);
        }
        return ans;
    }
}


Time Complexity: O(4^(m*n)), because on every cell we need to try 4 different directions.

Space Complexity:  O(m*n), Maximum Depth of the recursion tree(auxiliary space).
