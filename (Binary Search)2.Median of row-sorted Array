//Naive Approach
//TC : O(n*mlog(n*m))
//SC : O(n*m)

int median(int matrix[][], int R, int C) {
        ArrayList<Integer> list = new ArrayList<>();
        for(int i=0; i<R; i++){
            for(int j=0; j<C; j++){
                list.add(matrix[i][j]);
            }
        }
        Collections.sort(list);
        return list.get(((list.size()+1)/2)-1); 
}

//Better Approach

class Solution {
    
    int median(int matrix[][], int R, int C) {
        // code here
        int low = 1;
        int high = (int)1e9;

        while(low <= high){
            int mid = (low + high) /2;
            int count = 0;
            for(int i = 0; i<R; i++){                     // row[0],row[1]......row[row.length]
                count += findSmaller(matrix[i] , mid);   // each row find the numbers smaller than mid
            }
            if(count <= (R*C)/2)  low = mid + 1;
            else high = mid - 1;
        }
        return low;
    }
    
    public int findSmaller(int row[] , int mid){
        int low = 0;
        int high = row.length - 1;
        while(low <= high){
            int md = (low + high) / 2;
            if(row[md] <= mid){
                low = md + 1;
            }else{
                high = md -1;
            }
        }
        return low;
    }
}

Time Complexity: O(32 * R * log(C))
Auxiliary Space: O(1)
