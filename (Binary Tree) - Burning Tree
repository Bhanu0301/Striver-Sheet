class Solution {
    private int findMaxDistance(HashMap<TreeNode,TreeNode> map, TreeNode target){
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(target);
        HashMap<TreeNode, Integer> vis = new HashMap<>();
        vis.put(target, 1);

        int maxi = 0;
        while(!q.isEmpty()){
            int flag = 0;
            int sz = q.size();
            for(int i = 0;i<sz ; i++){
                TreeNode node = q.poll();
                if(node.left!=null && vis.get(node.left)==null){
                    flag = 1;
                    vis.put(node.left, 1);
                    q.offer(node.left);
                }
                if(node.right!=null && vis.get(node.right)==null){
                    flag = 1;
                    vis.put(node.right, 1);
                    q.offer(node.right);
                }
                if(map.get(node)!=null && vis.get(map.get(node))==null){
                    flag = 1;
                    vis.put(map.get(node), 1);
                    q.offer(map.get(node));
                }
            }
            if(flag == 1) maxi++;
        }
        return maxi;
    }
    private TreeNode bfsToMapParent(TreeNode root, HashMap<TreeNode,TreeNode> map, int start){
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        TreeNode res = new TreeNode(-1);
        //we need the target node , so lets initialize res to -1
        while(!q.isEmpty()){
            TreeNode node = q.poll();
            if(node.val == start) res = node;
            //Mapping
            if(node.left != null){
                map.put(node.left, node);
                q.offer(node.left);
            }
            if(node.right!=null){
                map.put(node.right, node);
                q.offer(node.right);
            }
        }
        return res;
    }
    public int amountOfTime(TreeNode root, int start) {
        //int start is given not the node
        //so i need to get the node to traverse
        //Also to move upwards i need to make parent pointers
        HashMap<TreeNode,TreeNode> map = new HashMap<>();
        TreeNode target = bfsToMapParent(root,map,start);
        int maxi = findMaxDistance(map,target);

        return maxi; 
    }
}
