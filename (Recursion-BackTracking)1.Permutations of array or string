//Approach is at each index swap with other elements and move the pointer to next index and repeat the same till pointer goes out of length
//TC : O(n!*n)
//SC : O(1)

class Solution {
    static void Helper(int ind,int[] nums, List<List<Integer>> ans){
        //base case

        if(ind == nums.length){
            List<Integer> ds = new ArrayList<>();
            for(int i = 0;i<nums.length;i++){
                ds.add(nums[i]);
            }
            ans.add(new ArrayList<>(ds));
            return;
        }
        //swap at each position with all rest possiblities
        for(int i = ind;i<nums.length;i++){
            swap(ind,i,nums);
            Helper(ind+1,nums,ans);
            swap(ind,i,nums);
        }
    }
    static void swap(int i,int j,int[] nums){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        Helper(0,nums,ans);
        return ans;
    }
}
