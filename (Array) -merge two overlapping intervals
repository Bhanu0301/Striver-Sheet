//Given an array of intervals,merge all overlapping intervals and return array of non-overlapping intervals.
//Ex : [[1,3],[2,6],[8,10],[15,18]] --> [[1,6],[8,10],[15,18]]

/*

Approach: Linearly iterate over the array if the data structure is empty insert the interval in the data structure.
          If the last element in the data structure overlaps with the current interval we merge the intervals by updating the last element in the data structure, 
          and if the current interval does not overlap with the last element in the data structure simply insert it into the data structure.

Intuition: Since we have sorted the intervals, the intervals which will be merging are bound to be adjacent. 
          We kept on merging simultaneously as we were traversing through the array and when the element was non-overlapping 
          we simply inserted the element in our data structure.
*/
class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals,(a,b)->Integer.compare(a[0],b[0]));


        ArrayList<int[]> res = new ArrayList<>();
        int start = intervals[0][0];
        int end = intervals[0][1];

        for(int i = 1;i<intervals.length ;i++){
            int istart = intervals[i][0];
            int iend = intervals[i][1];

            if(istart<=end){             //Check if start of curr interval is less than prev end
                end = Math.max(end,iend);
            }
            else{                        //added an Interval into res and defined new start and end
                res.add(new int[]{start,end});
                start = istart;
                end = iend;
            }
        }
        res.add(new int[]{start,end});   //For last interval
        return res.toArray(new int[0][]);//row dimension is compulsory to mention for 2D array def
    }
}

//TC : O(n*log n)+O(n*log n)*n
//SC : O(n)
