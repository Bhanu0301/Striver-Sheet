/* Brute force approach for this would be to use Powerset which uses bit manipulation
   However this can be optimized by solving this the following way */
class Solution{
    
    static void Helper(int sum,int ind,ArrayList<Integer> arr,int N,ArrayList<Integer> subSums){
        //Base condition
        if(ind == N){
            subSums.add(sum);
            return;
        }
        //Either I pick the element and add to sum
        Helper(sum+arr.get(ind),ind+1,arr,N,subSums);
        //Or I will just traverse without picking up
        Helper(sum,ind+1,arr,N,subSums);
    }
    ArrayList<Integer> subsetSums(ArrayList<Integer> arr, int N){
        
        //create a new data structure called Sums which is to be returned
        ArrayList<Integer> subSums = new ArrayList<Integer>();
        //now I will call my Helper function to carry out the recursive process
        Helper(0,0,arr,N,subSums);
        Collections.sort(subSums);
        return subSums;
        
    }
}


//TO PRINT ALL THE SUBSETS(POWER SET)

class Solution {
    void Helper(int ind,int[] nums,List<Integer> subs,List<List<Integer>> res){
            //base case
            if(ind == nums.length){
                res.add(new ArrayList<>(subs));
                return;
            }
            //I either considerthe element at that index
            subs.add(nums[ind]);
            Helper(ind + 1,nums,subs,res);
            //Or I exclude the elem at that Index wiz nothing but removing from sub prev added elem
            subs.remove(subs.size()-1);
            Helper(ind + 1,nums,subs,res);
            return; 
            
    }
    public List<List<Integer>> subsets(int[] nums) {
        //Its printing all the subsets
        //[1,2,3]
        /* at each time i either select the elem at that index or don't select the elem '*/ 
        //[[1,2,3],[1,2],[1,3],[1],[2,3],[2],[3],[]]
        
        //ArrayList<Integer>  subs= new ArrayList<Integer>();
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        Helper(0,nums,new ArrayList<>(),res);
        return res;


    }
}

TC: O(2^n)
SC: O(2^n)
